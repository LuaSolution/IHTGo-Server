<?php

namespace App;

use App\Helpers\Business;
use App\Models\Customer;
use App\Models\Device;
use App\Models\Driver;
use App\Models\Image;
use App\Models\Order;
use App\Models\Social;
use Carbon\Carbon;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Facades\DB;
use Tymon\JWTAuth\Contracts\JWTSubject;

class User extends Authenticatable implements JWTSubject
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password', 'code', 'activated', 'baned', 'phone', 'level',
        'activated_phone', 'birthday', 'chatkit_id', 'support', 'gender'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($user){
            $user->chatkit_id = static::generateChatkitId();
            if ($user->level == Business::USER_LEVEL_CUSTOMER){
                $user->code = static::generateCustomerCode();
            }
            if ($user->level == Business::USER_LEVEL_DRIVER){
                $user->code = static::generateDriverCode();
            }
        });
    }

    /**
     * @return string
     */
    public static function generateCustomerCode()
    {
        $count = User::where(['level' => Business::USER_LEVEL_CUSTOMER])->count();
        do{
            $orderCode = sprintf("KH%'.05d", $count);
            $orderCode++;
        }while (User::where('code', $orderCode)->first());
        return $orderCode;
    }

    /**
     * @return string
     */
    public static function generateDriverCode()
    {
        $count = User::where(['level' => Business::USER_LEVEL_DRIVER])->count();
        do{
            $orderCode = sprintf("TX%'.05d", $count);
            $orderCode++;
        }while (User::where('code', $orderCode)->first());
        return $orderCode;
    }

    /**
     * Automatically morph the password attribute.
     *
     * @param  string $value
     * @return void
     */
//    public function setPasswordAttribute($value)
//    {
//        $this->attributes['password'] = bcrypt($value);
//    }

    /**
     * @return string
     */
    public static function generateChatkitId()
    {
        do{
            $chatkitId = str_random(16);
        }while (User::where('chatkit_id', $chatkitId)->first());
        return $chatkitId;
    }

    public function getBirthdayAttribute($value)
    {
        if ($value){
            return Carbon::createFromFormat('Y-m-d', $value)->format('d/m/Y');
        }
    }

    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey(); // Eloquent Model method
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function customer()
    {
        return $this->hasOne(Customer::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function order()
    {
        return $this->hasOne(Order::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\hasMany
     */
    public function multiOrder()
    {
        return $this->hasMany(Order::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function driver()
    {
        return $this->hasOne(Driver::class)->withTrashed();
    }

    /**
     * Route notifications for the Nexmo channel.
     *
     * @return string
     */
    public function routeNotificationForNexmo()
    {
        return preg_replace('/0/', '+84', $this->phone, 1);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function image()
    {
        return $this->hasOne(Image::class, 'service_id', 'id')
            ->where(['type' => Business::IMAGE_UPLOAD_TYPE_AVATAR])
            ->select(['id', 'type'])->latest('id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function social()
    {
        return $this->hasOne(Social::class);
    }

    /**
     * @return mixed
     */
    public function device()
    {
        return $this->hasOne(Device::class)->select('fcm');
    }

    public function hasPermission($key)
    {
        $sql = "select count(*) as permission from users as u join
                    (select user_id from user_role as ur join
                            (select role_id from role_permission as rp
                                    join permissions as p
                                    on rp.permission_id = p.id
                                where p.key = '" . $key . "') as RPtemp
                            on ur.role_id = RPtemp.role_id) as URtemp
                    on u.id = URtemp.user_id";
        $check = DB::select($sql)[0];

        return $check->permission;
    }


    /**
     * @param $key
     * @param $userId
     * @return bool
     */
    public function hasFilePermission($key, $userId)
    {
        $fileName = config_path('permission') . '/' . $userId . '.json';
        if (file_exists($fileName)) {
            $jsonPermission = file_get_contents($fileName);
            if ($jsonPermission && $jsonPermission != '') {
                $arrPermission = json_decode($jsonPermission, true);
                $data = [];
                foreach ($arrPermission as $item) {
                    $data = array_merge($data, $item);
                }

                return in_array($key, $data);
            }
        } else {
            return $this->hasPermission($key);
        }
    }


}
