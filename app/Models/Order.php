<?php

namespace App\Models;

use App\Helpers\Business;
use App\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;

class Order extends BaseModel
{

    public static function getListNew()
    {
        $orders = DB::table('orders')
            ->select('orders.id as id', 'orders.code as code', 'orders.name as name', 'orders.car_type as car_type', 'orders.status as status', 'orders.total_price as total_price', 'users.name as user_id', 'orders.created_at as created_at')
            ->join('users', 'orders.user_id', '=', 'users.id')
            ->orderBy('orders.id', 'desc')->paginate(20);
        return $orders;
    }
    public static function getListNewSearch($data)
    {
        $orders = DB::table('orders')
            ->select('orders.id as id', 'orders.code as code', 'orders.name as name', 'orders.car_type as car_type', 'orders.status as status', 'orders.total_price as total_price', 'users.name as user_id', 'orders.created_at as created_at')
            ->join('users', 'orders.user_id', '=', 'users.id');
        if ($data->status != 0) {
            $orders = $orders->where('orders.status', $data->status);
        }
        if ($data->payment_type != 0) {
            $orders = $orders->where('orders.payment_type', $data->payment_type);
        }
        return $orders->orderBy('orders.id', 'desc')->paginate(20);
    }
    public static function postSearchListNew($data)
    {
        $orders = DB::table('orders')
            ->select('orders.id as id', 'orders.code as code', 'orders.name as name', 'orders.car_type as car_type', 'orders.status as status', 'orders.total_price as total_price', 'users.name as user_id', 'orders.created_at as created_at')
            ->join('users', 'orders.user_id', '=', 'users.id')
            ->join('order_details', 'orders.id', '=', 'order_details.order_id')
            ->where('orders.code', 'LIKE', '%' .  $data->search . '%')
            ->orWhere('orders.name', 'LIKE', '%' .  $data->search . '%')
            ->orWhere('order_details.sender_name', 'LIKE', '%' .  $data->search . '%')
            ->orWhere('order_details.sender_phone', 'LIKE', '%' .  $data->search . '%')
            ->orWhere('order_details.receive_name', 'LIKE', '%' .  $data->search . '%')
            ->orWhere('order_details.receive_phone', 'LIKE', '%' .  $data->search . '%')
            ->orderBy('orders.id', 'desc')->paginate(20);
        return $orders;
    }
    protected $fillable = [
        'code', 'name', 'car_type', 'total_price', 'payment_type', 'user_id', 'status', 'is_payment', 'car_option',
        'is_admin', 'coupon_code', 'payer', 'is_speed',
    ];

    public function setIsPaymentAttribute($value)
    {
        $this->attributes['is_payment'] = $value ? $value : 0;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($order) {
            $order->code = static::generateOrderCode();
        });
    }

    /**
     * @return string
     */
    public static function generateOrderCode()
    {
        $countRecordToday = Order::whereDate('created_at', Carbon::now()->toDateString())->count();
        $countRecordToday = (int) $countRecordToday + 1;
        do {
            $orderCode = sprintf("IHT%s%'.03d", date('Ymd'), $countRecordToday);
            $countRecordToday++;
        } while (Order::where('code', $orderCode)->first());
        return $orderCode;
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function detail()
    {
        return $this->hasOne(OrderDetail::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function customer()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function delivery()
    {
        return $this->hasOne(Delivery::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function images()
    {
        return $this->hasMany(Image::class, 'service_id', 'id')->where(['type' => Business::IMAGE_UPLOAD_TYPE_ORDER])->select(['id', 'type']);
    }

    /**
     * @param $orderID
     * @return mixed
     */
    public static function driverDevice($orderID)
    {
        $token = DB::table('deliveries as d')
            ->join('drivers as dr', 'dr.id', '=', 'd.driver_id')
            ->join('devices as de', 'de.user_id', '=', 'dr.user_id')
            ->where(['d.order_id' => $orderID])
            ->first();
        return $token->fcm;
    }

    public static function findFCMByDelivery($deliveryID)
    {
        $token = DB::table('deliveries as d')
            ->join('drivers as dr', 'dr.id', '=', 'd.driver_id')
            ->join('devices as de', 'de.user_id', '=', 'dr.user_id')
            ->where(['d.id' => $deliveryID])
            ->first();
        return $token;
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function route()
    {
        return $this->hasMany(OrderDelivery::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function receive()
    {
        return $this->hasMany(OrderReceive::class);
    }
    //raymond---lịch sử thông tin người gửi/nhận
    public static function loadInfoSender($request)
    {
        $user = $request->user();
        dd($user);

        $search = $request->get('term');
        $res = DB::table(config('constants.ORDER_DETAIL_TABLE'))
            ->select([DB::RAW('DISTINCT(sender_name)'), 'sender_phone', 'sender_address', 'sender_province_id', 'sender_district_id'])
            ->join('orders', 'orders.id', '=', 'order_details.order_id')
            ->where('order_details.sender_name', 'LIKE', '%' . $search . '%')
            ->where('orders.user_id', $user_id)->distinct()->get();


        return response()->json($res);
    }
    public static function loadInfoReceive($request)
    {
        $user_id = Auth::user()->id;
        $search = $request->get('term');
        $res = DB::table(config('constants.ORDER_DETAIL_TABLE'))
            ->select('receive_name', 'receive_phone', 'receive_address', 'receive_province_id', 'receive_district_id')
            ->join('orders', 'orders.id', '=', 'order_details.order_id')
            ->where('order_details.receive_name', 'LIKE', '%' . $search . '%')
            ->where('orders.user_id', $user_id)->orderBy('orders.id', 'desc')->distinct()->get();
        return response()->json($res);
    }
}
